Funções reservadas do sistemas

                back end

req: Request, res: Response
res.json('usuarios')
req.body
 parseInt(req.params.id); // Acessar o ID a partir dos parâmetros da rota



prisma
  prisma.createMessages.create // criar dados no banco
  prisma.createMessages.findMany // recuperar varios registros e pode definir critérios
  prisma.createMessages.delete
  prisma.createMessages.update
  t prisma.createUser.findUnique
  prisma.create.finOne //busca apenas 1 registro com critérios 
 prisma.create.count // conta um determinado registro com critérios
  prisma.create.aggreate // operações de agregações como somas medias maximos e minimos 

hash
   const hashedPassword = await bcrypt.hash(password, 10);


token
   const token = jwt.sign({ userId }, secretKey, { expiresIn: '1h' }); // Configure o tempo de expiração desejado


nodeCache
  const loginAttemptsCache = new NodeCache();
  const userLockCache = new NodeCache();


dates
    const unlockTime = new Date() as Date;


          front end


  const MyForm: React.FC = () => {
  const [formData, setFormData] = useState<IFormData>({
  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
  event.preventDefault()
  window.location.reload()

  interface DataFormUpdateTable {
  ids: number; // Defina a prop "id" como um número
  name: string;
  email: string;
  subject: string
}
const UpdateTable: React.FC<DataProps> = ({ ids, names, emails, subjects }) => {
  const [valueData, setvalueData] = useState<DataFormUpdateTable>({

 const response = await api.post('/users/login', dataForm)
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
        window.location.href = '/';










